- become: yes
  block:
    - name: configure lines in /etc/hosts
      block:
        - include_role:
            name: etc-hosts-lines
          vars: 
            destination_hosts: '{{etcd_hosts|default("")}}'
        - include_role:
            name: etc-hosts-lines
          vars:
            destination_hosts: '{{k8s_worker_hosts|default("")}}'


    - name:
      file:
        path: '{{item}}'
        state: directory
      with_items:
        - /etc/k8s/cert/ca

    - name: copy ca certificate
      copy:
        src: '{{playbook_dir}}/target/cert/ca/cert.pem'
        dest: /etc/k8s/cert/ca/cert.pem




    - name: create k8s encryption config
      become: no
      delegate_to: localhost
      run_once: yes
      template:
        src: '{{role_path}}/templates/encryption-config.yaml.j2'
        dest: '{{local_target_dir|default(playbook_dir + "/target")}}/encryption-config.yaml'
        force: no

    - name: distribute k8s encryption config
      copy:
        src:  '{{local_target_dir|default(playbook_dir + "/target")}}/encryption-config.yaml'
        dest: /etc/k8s/encryption-config.yaml





    - name: create kube kube-scheduler config
      template:
        src: '{{role_path}}/templates/kube-scheduler.yaml.j2'
        dest: /etc/k8s/kube-scheduler.yaml
        force: no




    - name: configure admin
      block:
        - name: generate cert for admin
          include_role:
            name: gen-cert
          vars:
            cert_dir: '/etc/k8s/cert/admin'
            common_name: admin
            organization: system:masters

        - name: 'generate kube config for admin'
          include_role:
            name: kubeconfig
          vars:
            client_name: admin
            client_cert: /etc/k8s/cert/admin/cert.pem
            client_key: /etc/k8s/cert/admin/cert-key.pem


    - name: configure service account certificate
      block:
        - name: generate cert for service account
          include_role:
            name: gen-cert
          vars:
            cert_dir: '/etc/k8s/cert/service-account'
            common_name: 'service-accounts'
            organization: 'Kubernetes'


    - when: etcd_hosts is defined
      block:
        - set_fact:
            etcd_host_list: []
        - set_fact:
            etcd_host_list: "{{etcd_host_list + [ item ] }}"
          with_inventory_hostnames: ['{{etcd_hosts}}']


    - name: generate kubernetes cert
      include_role:
        name: gen-cert
      vars:
        cert_hostnames: ['localhost', '10.32.0.1', 'k8s', '{{internal_hostname|default(inventory_hostname)}}']
        cert_dir: '/etc/k8s/cert/{{item}}'
        common_name: 'system:{{item}}'
        organization: 'system:{{item}}'
      with_items: &binaries
        - kube-apiserver
        - kube-controller-manager
        - kube-scheduler 

    - name: 'generate kube config for {{item}}'
      include_role:
        name: kubeconfig
      vars:
        client_name: '{{item}}'
        client_cert: '/etc/k8s/cert/{{item}}/cert.pem'
        client_key: '/etc/k8s/cert/{{item}}/cert-key.pem'
      with_items: *binaries

    - name: download k8s control plane binary distribution
      get_url:
        url: 'https://storage.googleapis.com/kubernetes-release/release/v1.18.6/bin/linux/amd64/{{item}}'
        dest: '/usr/local/bin/{{item}}'
        mode: ugo+x
      with_items: *binaries

    - name: create systemd service
      include_role:
        name: systemd-service
      vars:
        service_name: '{{item}}'
        service_file_template: '{{playbook_dir}}/roles/k8s-controllers/templates/{{item}}.service.j2'
      with_items: *binaries  










    - name: wait till kube-apiserver is up
      pause:
        minutes: 1

    - set_fact:
        this_role_path: '{{role_path}}'

      
    - name: 'create objects'
      delegate_to: localhost
      become: no
      run_once: yes
      block:
        - shell: 
            cmd: >
              kubectl --kubeconfig {{playbook_dir}}/target/config/admin.kubeconfig \
                  apply \
                  -f {{role_path}}/files/create-role.yml \
                  -f {{role_path}}/files/bind-role.yml