
- name: configure worker node
  become: yes
  block:
  - include_role:
      name: etc-hosts-lines
    vars:
      destination_hosts: '{{k8s_controller_hosts|default("")}}'

  - name: local kernel module br_netfilter
    block:
      - shell: modprobe br_netfilter
      - lineinfile:
          path: /etc/modules
          line: br_netfilter

  - name: Disable SWAP since kubernetes can't work with swap enabled (1/2)
    block:
      - shell: swapoff -a
      - replace:
          path: /etc/fstab
          regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
          replace: '# \1'
    
  - file:
      path: '{{item}}'
      state: directory
    with_items:
      - /opt/bin
      - /etc/cni/net.d
      - /opt/cni/bin

  - name: download crictl
    unarchive:
      src: https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.18.0/crictl-v1.18.0-linux-amd64.tar.gz
      dest: /usr/local/bin
      remote_src: yes
      creates: /usr/local/bin/crictl

  - name: download cni
    unarchive:
      src: https://github.com/containernetworking/plugins/releases/download/v0.8.6/cni-plugins-linux-amd64-v0.8.6.tgz
      dest: /opt/cni/bin
      remote_src: yes
      creates: /opt/cni/bin/flannel



  - name: apt update
    apt: update_cache=yes force_apt_get=yes cache_valid_time=3600
    ignore_errors: yes
    
  - name: install packages
    package:
      name: '{{item}}'
      state: present
    with_items:
      - docker.io
      - socat
      - conntrack
      - ipset
      - lvm2 # required by ceph

  - name:
    file:
      path: '{{item}}'
      state: directory
    with_items:
      - /etc/k8s/cert/ca

  - name: copy ca certificate
    copy:
      src: '{{playbook_dir}}/target/cert/ca/cert.pem'
      dest: /etc/k8s/cert/ca/cert.pem

  - name: generate cert for kubelet
    include_role:
      name: gen-cert
    vars:
      cert_dir: '/etc/k8s/cert/kubelet'
      common_name: 'system:node:{{internal_host_name|default(inventory_hostname)|default("k8s-worker-" + (1+ansible_play_batch.index(inventory_hostname))|string)}}'
      organization: 'system:nodes'

  - name: generate cert for kube-proxy
    include_role:
      name: gen-cert
    vars:
      cert_dir: '/etc/k8s/cert/kube-proxy'
      common_name: 'system:kube-proxy'
      organization: 'system:node-proxier'


  
  - name:
    file:
      path: /etc/docker
      state: directory
  - name: install docker config
    template:
      src: '{{role_path}}/templates/docker-config.json.j2'
      dest: /etc/docker/daemon.json

  - name: restart dockerd after configuration change
    systemd:
      name: docker
      enabled: yes
      state: restarted



  - when: k8s_controller_hosts is defined
    block:
      - set_fact:
          k8s_controller_host_list: []
      - set_fact:
          k8s_controller_host_list: "{{k8s_controller_host_list + [ item ] }}"
        with_inventory_hostnames: ['{{k8s_controller_hosts}}']

  - name: 'generate worker kubeconfig for {{item}}'
    include_role:
      name: kubeconfig
    vars:
      apiserver_hostname: '{{(k8s_controller_host_list|default(ansible_play_hosts))[
        ansible_play_batch.index(inventory_hostname) % k8s_controller_host_list|default(ansible_play_hosts)|length]}}'
      client_name: '{{item}}'
      client_cert: '/etc/k8s/cert/{{item}}/cert.pem'
      client_key: '/etc/k8s/cert/{{item}}/key.pem'
    with_items: &components
      - kubelet
      - kube-proxy

  - name: copy config
    template: 
      src:  '{{role_path}}/templates/{{item}}.yml.j2'
      dest: '/etc/k8s/{{item}}.yml'
      mode: 644
    with_items: *components
    
  - name: download kube worker binary distributions
    get_url:
      url: 'https://storage.googleapis.com/kubernetes-release/release/v1.18.6/bin/linux/amd64/{{item}}'
      dest: '/usr/local/bin/{{item}}'
      mode: ugo+x
    with_items: *components

  - set_fact:
      this_role_path: '{{role_path}}'

  - include_role:
      name: systemd-service
    vars:
      service_name: '{{item}}'
      service_file_template: '{{this_role_path}}/templates/{{item}}.service.j2'
    with_items: *components

  - name: 'configure peer iface for flannel'
    block:
      - file:
          path: /etc/k8s/flannel
          state: directory
          recurse: yes
      - set_fact: 
          flannel_ip_address: '{{hostvars[inventory_hostname].internal_ip_address|default(hostvars[inventory_hostname].ansible_default_ipv4.address)|default(hostvars[inventory_hostname].ansible_all_ipv4_addresses[0])}}'
      - shell: 
          cmd: >
            echo "IFACE=$(ifconfig | grep -B1 {{internal_iface|default(flannel_ip_address)}} | head -1 | cut -f1 -d:)" \
                > /etc/k8s/flannel/env.sh

  - name: wait till kube-apiserver finds nodes
    pause:
      minutes: 1

  - name: 'configure pod cidr'
    delegate_to: localhost
    become: no
    block:
      - set_fact: 
          pod_cidr: '{{pod_cidr|default("10.200." + ((1+ansible_play_batch.index(inventory_hostname))|string) + ".0/24")}}'
      - shell: 
          cmd: >
            kubectl --kubeconfig {{playbook_dir}}/target/config/admin.kubeconfig \
                patch node {{internal_hostname|default(inventory_hostname)}} \
                -p '{"spec":{"podCIDR":"{{pod_cidr}}" } }'